/**
 * Generated by "@vuepress/internal-site-data"
 */
export const siteData = {
  "title": "",
  "description": "",
  "base": "/",
  "headTags": [],
  "pages": [
    {
      "title": "Home",
      "frontmatter": {
        "home": true,
        "heroText": "我的笔记",
        "tagline": "Hero 副标题",
        "actionText": "快速上手 →",
        "actionLink": "/go/",
        "features": [
          {
            "title": "简洁至上",
            "details": "以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。"
          },
          {
            "title": "Vue驱动",
            "details": "享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。"
          },
          {
            "title": "高性能",
            "details": "VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。"
          }
        ],
        "footer": "MIT Licensed | Copyright © 2018-present Evan You"
      },
      "regularPath": "/",
      "relativePath": "README.md",
      "key": "v-0f5563a8",
      "path": "/"
    },
    {
      "title": "结构体",
      "frontmatter": {},
      "regularPath": "/go/10_%E7%BB%93%E6%9E%84%E5%92%8C%E6%96%B9%E6%B3%95.html",
      "relativePath": "go/10_结构和方法.md",
      "key": "v-7187df7a",
      "path": "/go/10_%E7%BB%93%E6%9E%84%E5%92%8C%E6%96%B9%E6%B3%95.html",
      "headers": [
        {
          "level": 3,
          "title": "结构体的内存布局",
          "slug": "结构体的内存布局"
        },
        {
          "level": 3,
          "title": "递归结构体",
          "slug": "递归结构体"
        },
        {
          "level": 3,
          "title": "结构体转换",
          "slug": "结构体转换"
        },
        {
          "level": 3,
          "title": "结构体工厂",
          "slug": "结构体工厂"
        },
        {
          "level": 3,
          "title": "如何强制使用工厂方法",
          "slug": "如何强制使用工厂方法"
        },
        {
          "level": 3,
          "title": "带标签的结构体",
          "slug": "带标签的结构体"
        },
        {
          "level": 3,
          "title": "匿名字段和内嵌结构体",
          "slug": "匿名字段和内嵌结构体"
        },
        {
          "level": 3,
          "title": "命名冲突",
          "slug": "命名冲突"
        },
        {
          "level": 3,
          "title": "方法",
          "slug": "方法"
        },
        {
          "level": 3,
          "title": "类型和作用在它上面定义的方法必须放在同一个包里定义",
          "slug": "类型和作用在它上面定义的方法必须放在同一个包里定义"
        },
        {
          "level": 3,
          "title": "函数和方法的区别",
          "slug": "函数和方法的区别"
        },
        {
          "level": 3,
          "title": "指针或值作为接受者",
          "slug": "指针或值作为接受者"
        },
        {
          "level": 3,
          "title": "方法和未导出字段",
          "slug": "方法和未导出字段"
        },
        {
          "level": 3,
          "title": "内嵌类型的方法和继承",
          "slug": "内嵌类型的方法和继承"
        },
        {
          "level": 3,
          "title": "如何在类型中嵌入功能",
          "slug": "如何在类型中嵌入功能"
        },
        {
          "level": 3,
          "title": "多重继承",
          "slug": "多重继承"
        }
      ]
    },
    {
      "title": "接口",
      "frontmatter": {},
      "regularPath": "/go/11_%E6%8E%A5%E5%8F%A3.html",
      "relativePath": "go/11_接口.md",
      "key": "v-7bf32a91",
      "path": "/go/11_%E6%8E%A5%E5%8F%A3.html",
      "headers": [
        {
          "level": 2,
          "title": "初识接口",
          "slug": "初识接口"
        },
        {
          "level": 2,
          "title": "接口嵌套接口",
          "slug": "接口嵌套接口"
        },
        {
          "level": 2,
          "title": "类型断言",
          "slug": "类型断言"
        },
        {
          "level": 3,
          "title": "类型判断 type-switch",
          "slug": "类型判断-type-switch"
        },
        {
          "level": 2,
          "title": "使用方法集于接口",
          "slug": "使用方法集于接口"
        },
        {
          "level": 2,
          "title": "sort包",
          "slug": "sort包"
        },
        {
          "level": 2,
          "title": "空接口",
          "slug": "空接口"
        },
        {
          "level": 2,
          "title": "反射包",
          "slug": "反射包"
        },
        {
          "level": 3,
          "title": "事实上，反射是通过检查一个接口的值，变量首先被转换成空接口",
          "slug": "事实上-反射是通过检查一个接口的值-变量首先被转换成空接口"
        },
        {
          "level": 2,
          "title": "通过反射修改值",
          "slug": "通过反射修改值"
        },
        {
          "level": 3,
          "title": "反射结构体",
          "slug": "反射结构体"
        }
      ]
    },
    {
      "title": "golang",
      "frontmatter": {},
      "regularPath": "/go/4.5%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html",
      "relativePath": "go/4.5基本类型和运算符.md",
      "key": "v-2beb26cf",
      "path": "/go/4.5%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%92%8C%E8%BF%90%E7%AE%97%E7%AC%A6.html",
      "headers": [
        {
          "level": 3,
          "title": "位运算",
          "slug": "位运算"
        },
        {
          "level": 3,
          "title": "类型别名",
          "slug": "类型别名"
        },
        {
          "level": 3,
          "title": "字符类型",
          "slug": "字符类型"
        }
      ]
    },
    {
      "title": "协程",
      "frontmatter": {},
      "regularPath": "/go/14%E5%8D%8F%E7%A8%8B%E4%B8%8E%E9%80%9A%E9%81%93.html",
      "relativePath": "go/14协程与通道.md",
      "key": "v-4956137b",
      "path": "/go/14%E5%8D%8F%E7%A8%8B%E4%B8%8E%E9%80%9A%E9%81%93.html",
      "headers": [
        {
          "level": 2,
          "title": "使用GOMAXPROCS",
          "slug": "使用gomaxprocs"
        },
        {
          "level": 2,
          "title": "协程间的通信",
          "slug": "协程间的通信"
        },
        {
          "level": 2,
          "title": "通信操作符号<-",
          "slug": "通信操作符号"
        },
        {
          "level": 2,
          "title": "通道阻塞",
          "slug": "通道阻塞"
        },
        {
          "level": 2,
          "title": "同步通道",
          "slug": "同步通道"
        },
        {
          "level": 2,
          "title": "协程中用通道输出结果",
          "slug": "协程中用通道输出结果"
        },
        {
          "level": 2,
          "title": "关闭通道-测试阻塞的通道",
          "slug": "关闭通道-测试阻塞的通道"
        },
        {
          "level": 2,
          "title": "使用select切换协程",
          "slug": "使用select切换协程"
        },
        {
          "level": 2,
          "title": "通道、超时和计时器",
          "slug": "通道、超时和计时器"
        },
        {
          "level": 2,
          "title": "实现futures 模式",
          "slug": "实现futures-模式"
        }
      ]
    },
    {
      "title": "和 C/C++ 不一样，Go 中的字符串是根据长度限定，而非特殊字符 \\0 (其他语言字符串的结尾总是有\\0)",
      "frontmatter": {},
      "regularPath": "/go/4.6%E5%AD%97%E7%AC%A6%E4%B8%B2.html",
      "relativePath": "go/4.6字符串.md",
      "key": "v-36a4ea04",
      "path": "/go/4.6%E5%AD%97%E7%AC%A6%E4%B8%B2.html",
      "headers": [
        {
          "level": 3,
          "title": "和 C/C++ 不一样，Go 中的字符串是根据长度限定，而非特殊字符 \\0 (其他语言字符串的结尾总是有\\0)",
          "slug": "和-c-c-不一样-go-中的字符串是根据长度限定-而非特殊字符-0-其他语言字符串的结尾总是有-0"
        },
        {
          "level": 3,
          "title": "通过函数len来获取字符串的长度 例如len(str)",
          "slug": "通过函数len来获取字符串的长度-例如len-str"
        },
        {
          "level": 3,
          "title": "注意事项 获取字符串中某个字节的地址的行为是非法的，例如：&str[i]。",
          "slug": "注意事项-获取字符串中某个字节的地址的行为是非法的-例如-str-i-。"
        },
        {
          "level": 3,
          "title": "HasPrefix 判断字符串 s 是否以 prefix 开头：",
          "slug": "hasprefix-判断字符串-s-是否以-prefix-开头"
        },
        {
          "level": 3,
          "title": "HasSuffix 判断字符串 s 是否以 suffix 结尾：",
          "slug": "hassuffix-判断字符串-s-是否以-suffix-结尾"
        },
        {
          "level": 3,
          "title": "Contains 判断字符串 s 是否包含 substr：",
          "slug": "contains-判断字符串-s-是否包含-substr"
        },
        {
          "level": 3,
          "title": "Index 返回字符串 str 在字符串 s 中的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str：",
          "slug": "index-返回字符串-str-在字符串-s-中的索引-str-的第一个字符的索引-1-表示字符串-s-不包含字符串-str"
        },
        {
          "level": 3,
          "title": "LastIndex 返回字符串 str 在字符串 s 中最后出现位置的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str：",
          "slug": "lastindex-返回字符串-str-在字符串-s-中最后出现位置的索引-str-的第一个字符的索引-1-表示字符串-s-不包含字符串-str"
        },
        {
          "level": 3,
          "title": "Replace 用于将字符串 str 中的前 n 个字符串 old 替换为字符串 new，并返回一个新的字符串，如果 n = -1 则替换所有字符串 old 为字符串 new：",
          "slug": "replace-用于将字符串-str-中的前-n-个字符串-old-替换为字符串-new-并返回一个新的字符串-如果-n-1-则替换所有字符串-old-为字符串-new"
        },
        {
          "level": 3,
          "title": "Count 用于计算字符串 str 在字符串 s 中出现的非重叠次数(相隔一个即为非重叠)",
          "slug": "count-用于计算字符串-str-在字符串-s-中出现的非重叠次数-相隔一个即为非重叠"
        },
        {
          "level": 3,
          "title": "你可以使用 strings.TrimSpace(s) 来剔除字符串开头和结尾的空白符号；如果你想要剔除指定字符，则可以使用 strings.Trim(s, \"cut\") 来将开头和结尾的 cut 去除掉。该函数的第二个参数可以包含任何字符，如果你只想剔除开头或者结尾的字符串，则可以使用 TrimLeft 或者 TrimRight 来实现。",
          "slug": "你可以使用-strings-trimspace-s-来剔除字符串开头和结尾的空白符号-如果你想要剔除指定字符-则可以使用-strings-trim-s-cut-来将开头和结尾的-cut-去除掉。该函数的第二个参数可以包含任何字符-如果你只想剔除开头或者结尾的字符串-则可以使用-trimleft-或者-trimright-来实现。"
        },
        {
          "level": 3,
          "title": "strings.Fields(s) 利用空白作为分隔符将字符串分割为若干块，并返回一个 slice 。如果字符串只包含空白符号，返回一个长度为 0 的 slice 。",
          "slug": "strings-fields-s-利用空白作为分隔符将字符串分割为若干块-并返回一个-slice-。如果字符串只包含空白符号-返回一个长度为-0-的-slice-。"
        }
      ]
    },
    {
      "title": "定义错误",
      "frontmatter": {},
      "regularPath": "/go/13_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html",
      "relativePath": "go/13_错误处理.md",
      "key": "v-553838bd",
      "path": "/go/13_%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86.html",
      "headers": [
        {
          "level": 2,
          "title": "定义错误",
          "slug": "定义错误"
        },
        {
          "level": 2,
          "title": "运行时异常和panic",
          "slug": "运行时异常和panic"
        },
        {
          "level": 2,
          "title": "go panicking",
          "slug": "go-panicking"
        },
        {
          "level": 2,
          "title": "从panic中恢复(Recover)",
          "slug": "从panic中恢复-recover"
        },
        {
          "level": 2,
          "title": "自定义包中的错误处理和panicking",
          "slug": "自定义包中的错误处理和panicking"
        },
        {
          "level": 2,
          "title": "用闭包处理错误的模式",
          "slug": "用闭包处理错误的模式"
        },
        {
          "level": 2,
          "title": "启动外部命令和程序",
          "slug": "启动外部命令和程序"
        }
      ]
    },
    {
      "title": "如果我们想要在错误发生的同时终止程序的运行，我们可以使用 os 包的 Exit 函数",
      "frontmatter": {},
      "regularPath": "/go/5.2%E6%B5%8B%E8%AF%95%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E9%94%99%E8%AF%AF.html",
      "relativePath": "go/5.2测试多返回值函数的错误.md",
      "key": "v-98fe5028",
      "path": "/go/5.2%E6%B5%8B%E8%AF%95%E5%A4%9A%E8%BF%94%E5%9B%9E%E5%80%BC%E5%87%BD%E6%95%B0%E7%9A%84%E9%94%99%E8%AF%AF.html",
      "headers": [
        {
          "level": 3,
          "title": "如果我们想要在错误发生的同时终止程序的运行，我们可以使用 os 包的 Exit 函数",
          "slug": "如果我们想要在错误发生的同时终止程序的运行-我们可以使用-os-包的-exit-函数"
        }
      ]
    },
    {
      "frontmatter": {},
      "regularPath": "/go/6.1%E5%87%BD%E6%95%B0.html",
      "relativePath": "go/6.1函数.md",
      "key": "v-083f4454",
      "path": "/go/6.1%E5%87%BD%E6%95%B0.html",
      "headers": [
        {
          "level": 3,
          "title": "可以定义没有形参名的函数 func f(int int float64)",
          "slug": "可以定义没有形参名的函数-func-f-int-int-float64"
        },
        {
          "level": 3,
          "title": "golang 也分值传递和地址传递",
          "slug": "golang-也分值传递和地址传递"
        },
        {
          "level": 3,
          "title": "在函数调用时 切片slice 字典map 接口 interface 通道channel 这些引用类型默认都是地址传递",
          "slug": "在函数调用时-切片slice-字典map-接口-interface-通道channel-这些引用类型默认都是地址传递"
        },
        {
          "level": 3,
          "title": "命名返回值",
          "slug": "命名返回值"
        },
        {
          "level": 3,
          "title": "传递变长参数",
          "slug": "传递变长参数"
        }
      ]
    },
    {
      "frontmatter": {},
      "regularPath": "/go/5.3Switch.html",
      "relativePath": "go/5.3Switch.md",
      "key": "v-70813ae6",
      "path": "/go/5.3Switch.html"
    },
    {
      "title": "log",
      "frontmatter": {},
      "regularPath": "/go/6.5_%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html",
      "relativePath": "go/6.5_内置函数.md",
      "key": "v-2d0e5476",
      "path": "/go/6.5_%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0.html",
      "headers": [
        {
          "level": 2,
          "title": "log",
          "slug": "log"
        },
        {
          "level": 3,
          "title": "当在进行大量的计算时，提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果，称之为内存缓存",
          "slug": "当在进行大量的计算时-提升性能最直接有效的一种方式就是避免重复计算。通过在内存中缓存和重复利用相同计算的结果-称之为内存缓存"
        }
      ]
    },
    {
      "frontmatter": {},
      "regularPath": "/go/6.7_for-range%E7%BB%93%E6%9E%84.html",
      "relativePath": "go/6.7_for-range结构.md",
      "key": "v-0c4ead91",
      "path": "/go/6.7_for-range%E7%BB%93%E6%9E%84.html"
    },
    {
      "title": "指针",
      "frontmatter": {},
      "regularPath": "/go/4.7%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88.html",
      "relativePath": "go/4.7初识指针.md",
      "key": "v-b8abdd44",
      "path": "/go/4.7%E5%88%9D%E8%AF%86%E6%8C%87%E9%92%88.html",
      "headers": [
        {
          "level": 3,
          "title": "一个指针变量可以指向任何一个值的内存地址，在32位机器占用4个字节 64位8个 与值的大小无关",
          "slug": "一个指针变量可以指向任何一个值的内存地址-在32位机器占用4个字节-64位8个-与值的大小无关"
        },
        {
          "level": 3,
          "title": "指针不能指向文字或常量 例如 ptr := &10 就是一个错误的示例",
          "slug": "指针不能指向文字或常量-例如-ptr-10-就是一个错误的示例"
        },
        {
          "level": 3,
          "title": "当程序需要占用大量内存时，使用指针会减少内存占用和提高效率，指针也可以指向另一个指针，可以嵌套引用（不建议）",
          "slug": "当程序需要占用大量内存时-使用指针会减少内存占用和提高效率-指针也可以指向另一个指针-可以嵌套引用-不建议"
        },
        {
          "level": 3,
          "title": "在Go语言中，返回函数中局部变量的地址也是安全的。例如下面的代码，调用f函数时创建局部变量v，在局部变量地址被返回之后依然有效，因为指针p依然引用这个变量。",
          "slug": "在go语言中-返回函数中局部变量的地址也是安全的。例如下面的代码-调用f函数时创建局部变量v-在局部变量地址被返回之后依然有效-因为指针p依然引用这个变量。"
        },
        {
          "level": 3,
          "title": "对于聚合类型每个成员——比如结构体的每个字段、或者是数组的每个元素——也都是对应一个变量，因此可以被取地址。",
          "slug": "对于聚合类型每个成员-比如结构体的每个字段、或者是数组的每个元素-也都是对应一个变量-因此可以被取地址。"
        },
        {
          "level": 3,
          "title": "那么Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢",
          "slug": "那么go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢"
        },
        {
          "level": 3,
          "title": "编译器会自动选择在栈上还是在堆上分配局部变量的存储空间",
          "slug": "编译器会自动选择在栈上还是在堆上分配局部变量的存储空间"
        }
      ]
    },
    {
      "title": "读取用户的输入",
      "frontmatter": {},
      "regularPath": "/go/12_%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6.html",
      "relativePath": "go/12_读写文件.md",
      "key": "v-1fbca00c",
      "path": "/go/12_%E8%AF%BB%E5%86%99%E6%96%87%E4%BB%B6.html",
      "headers": [
        {
          "level": 2,
          "title": "读取用户的输入",
          "slug": "读取用户的输入"
        },
        {
          "level": 2,
          "title": "文件拷贝",
          "slug": "文件拷贝"
        },
        {
          "level": 2,
          "title": "从命令行读取参数",
          "slug": "从命令行读取参数"
        },
        {
          "level": 2,
          "title": "flag包",
          "slug": "flag包"
        },
        {
          "level": 2,
          "title": "用切片读写文件",
          "slug": "用切片读写文件"
        }
      ]
    },
    {
      "title": "map",
      "frontmatter": {},
      "regularPath": "/go/8.0Map.html",
      "relativePath": "go/8.0Map.md",
      "key": "v-86d21e62",
      "path": "/go/8.0Map.html",
      "headers": [
        {
          "level": 3,
          "title": "key",
          "slug": "key"
        },
        {
          "level": 3,
          "title": "value",
          "slug": "value"
        },
        {
          "level": 3,
          "title": "标明map的初始容量",
          "slug": "标明map的初始容量"
        },
        {
          "level": 3,
          "title": "用切片作为map的值",
          "slug": "用切片作为map的值"
        },
        {
          "level": 3,
          "title": "测试键值对是否存在及删除元素",
          "slug": "测试键值对是否存在及删除元素"
        },
        {
          "level": 3,
          "title": "for-range遍历map",
          "slug": "for-range遍历map"
        },
        {
          "level": 3,
          "title": "map类型的切片",
          "slug": "map类型的切片"
        },
        {
          "level": 3,
          "title": "将map的键值对调",
          "slug": "将map的键值对调"
        }
      ]
    },
    {
      "title": "数组",
      "frontmatter": {},
      "regularPath": "/go/6.6_%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87.html",
      "relativePath": "go/6.6_数组与切片.md",
      "key": "v-4ae6f230",
      "path": "/go/6.6_%E6%95%B0%E7%BB%84%E4%B8%8E%E5%88%87%E7%89%87.html",
      "headers": [
        {
          "level": 2,
          "title": "不定长的数组就是切片 切片是可索引的 终止索引标识的项不包括在切片内",
          "slug": "不定长的数组就是切片-切片是可索引的-终止索引标识的项不包括在切片内"
        },
        {
          "level": 3,
          "title": "注意！绝对不要用指针指向切片",
          "slug": "注意-绝对不要用指针指向切片"
        }
      ]
    },
    {
      "title": "defer会推迟到函数返回之前或者任意位置执行return语句之后执行某个语句",
      "frontmatter": {},
      "regularPath": "/go/6.4_defer%E5%92%8C%E8%BF%BD%E8%B8%AA.html",
      "relativePath": "go/6.4_defer和追踪.md",
      "key": "v-7ce3ecd6",
      "path": "/go/6.4_defer%E5%92%8C%E8%BF%BD%E8%B8%AA.html",
      "headers": [
        {
          "level": 3,
          "title": "defer会推迟到函数返回之前或者任意位置执行return语句之后执行某个语句",
          "slug": "defer会推迟到函数返回之前或者任意位置执行return语句之后执行某个语句"
        }
      ]
    },
    {
      "title": "字符串",
      "frontmatter": {},
      "regularPath": "/go/6.8%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87%E7%9A%84%E5%BA%94%E7%94%A8.html",
      "relativePath": "go/6.8 字符串、数组和切片的应用.md",
      "key": "v-6e6753fa",
      "path": "/go/6.8%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87%E7%9A%84%E5%BA%94%E7%94%A8.html",
      "headers": [
        {
          "level": 3,
          "title": "截取字符串的某一部分",
          "slug": "截取字符串的某一部分"
        },
        {
          "level": 3,
          "title": "修改字符串中的某个字符",
          "slug": "修改字符串中的某个字符"
        },
        {
          "level": 3,
          "title": "切片排序",
          "slug": "切片排序"
        },
        {
          "level": 3,
          "title": "append函数常见操作",
          "slug": "append函数常见操作"
        },
        {
          "level": 3,
          "title": "切片和垃圾回收",
          "slug": "切片和垃圾回收"
        }
      ]
    },
    {
      "title": "package",
      "frontmatter": {},
      "regularPath": "/go/9_%E5%8C%85.html",
      "relativePath": "go/9_包.md",
      "key": "v-fa1576ee",
      "path": "/go/9_%E5%8C%85.html",
      "headers": [
        {
          "level": 3,
          "title": "regexp 包",
          "slug": "regexp-包"
        },
        {
          "level": 3,
          "title": "锁和 sync 包",
          "slug": "锁和-sync-包"
        },
        {
          "level": 3,
          "title": "精密计算和 big 包",
          "slug": "精密计算和-big-包"
        },
        {
          "level": 3,
          "title": "自定义包和可见性",
          "slug": "自定义包和可见性"
        },
        {
          "level": 3,
          "title": "godoc 工具",
          "slug": "godoc-工具"
        },
        {
          "level": 3,
          "title": "go install",
          "slug": "go-install"
        },
        {
          "level": 3,
          "title": "自定义包的目录结构",
          "slug": "自定义包的目录结构"
        }
      ]
    },
    {
      "title": "Golang",
      "frontmatter": {},
      "regularPath": "/go/",
      "relativePath": "go/README.md",
      "key": "v-25cd5d1c",
      "path": "/go/",
      "headers": [
        {
          "level": 2,
          "title": "Golang",
          "slug": "golang"
        },
        {
          "level": 3,
          "title": "基本类型和运算符",
          "slug": "基本类型和运算符"
        },
        {
          "level": 3,
          "title": "字符串",
          "slug": "字符串"
        }
      ]
    },
    {
      "title": "变量和常量",
      "frontmatter": {},
      "regularPath": "/rust/01%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F.html",
      "relativePath": "rust/01常量和变量.md",
      "key": "v-fa6a50de",
      "path": "/rust/01%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F.html",
      "headers": [
        {
          "level": 2,
          "title": "常量",
          "slug": "常量"
        },
        {
          "level": 3,
          "title": "遮蔽",
          "slug": "遮蔽"
        }
      ]
    },
    {
      "title": "if",
      "frontmatter": {},
      "regularPath": "/rust/04%E6%B5%81%E7%A8%8B.html",
      "relativePath": "rust/04流程.md",
      "key": "v-3d5035cb",
      "path": "/rust/04%E6%B5%81%E7%A8%8B.html",
      "headers": [
        {
          "level": 3,
          "title": "通过标签终止循环",
          "slug": "通过标签终止循环"
        },
        {
          "level": 3,
          "title": "可以在break表达式后添加要返回的值",
          "slug": "可以在break表达式后添加要返回的值"
        },
        {
          "level": 2,
          "title": "for in",
          "slug": "for-in"
        }
      ]
    },
    {
      "title": "数据类型",
      "frontmatter": {},
      "regularPath": "/rust/02%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",
      "relativePath": "rust/02数据类型.md",
      "key": "v-7fbe7328",
      "path": "/rust/02%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",
      "headers": [
        {
          "level": 2,
          "title": "整形",
          "slug": "整形"
        },
        {
          "level": 3,
          "title": "整型溢出",
          "slug": "整型溢出"
        },
        {
          "level": 2,
          "title": "浮点类型",
          "slug": "浮点类型"
        },
        {
          "level": 2,
          "title": "复合类型",
          "slug": "复合类型"
        },
        {
          "level": 3,
          "title": "元组类型",
          "slug": "元组类型"
        },
        {
          "level": 2,
          "title": "数组类型",
          "slug": "数组类型"
        }
      ]
    },
    {
      "title": "函数",
      "frontmatter": {},
      "regularPath": "/rust/03%E5%87%BD%E6%95%B0.html",
      "relativePath": "rust/03函数.md",
      "key": "v-2fe467dc",
      "path": "/rust/03%E5%87%BD%E6%95%B0.html",
      "headers": [
        {
          "level": 2,
          "title": "表达式和语句",
          "slug": "表达式和语句"
        },
        {
          "level": 2,
          "title": "带有返回值的函数",
          "slug": "带有返回值的函数"
        }
      ]
    },
    {
      "title": "webpack",
      "frontmatter": {},
      "regularPath": "/webpack/01_webpack.html",
      "relativePath": "webpack/01_webpack.md",
      "key": "v-09d2a90e",
      "path": "/webpack/01_webpack.html",
      "headers": [
        {
          "level": 2,
          "title": "mode",
          "slug": "mode"
        },
        {
          "level": 2,
          "title": "开启源映射",
          "slug": "开启源映射"
        },
        {
          "level": 2,
          "title": "devtool",
          "slug": "devtool"
        },
        {
          "level": 3,
          "title": "不会生成sourcemap的值",
          "slug": "不会生成sourcemap的值"
        },
        {
          "level": 3,
          "title": "会生成sourcemap的值",
          "slug": "会生成sourcemap的值"
        }
      ]
    },
    {
      "title": "引用就是指针",
      "frontmatter": {},
      "regularPath": "/rust/06%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8.html",
      "relativePath": "rust/06引用与借用.md",
      "key": "v-0e3f88e8",
      "path": "/rust/06%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8.html",
      "headers": [
        {
          "level": 2,
          "title": "悬垂引用",
          "slug": "悬垂引用"
        }
      ]
    },
    {
      "title": "字符串slice",
      "frontmatter": {},
      "regularPath": "/rust/07slice.html",
      "relativePath": "rust/07slice.md",
      "key": "v-7bdcd29b",
      "path": "/rust/07slice.html",
      "headers": [
        {
          "level": 2,
          "title": "字符串slice",
          "slug": "字符串slice"
        }
      ]
    },
    {
      "title": "babel命令行使用",
      "frontmatter": {},
      "regularPath": "/webpack/02_babel.html",
      "relativePath": "webpack/02_babel.md",
      "key": "v-695e9dbd",
      "path": "/webpack/02_babel.html",
      "headers": [
        {
          "level": 2,
          "title": "bebel的预设",
          "slug": "bebel的预设"
        },
        {
          "level": 2,
          "title": "babel的底层原理",
          "slug": "babel的底层原理"
        }
      ]
    },
    {
      "title": "脚本",
      "frontmatter": {},
      "regularPath": "/webpack/05_webpack%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.html",
      "relativePath": "webpack/05_webpack本地服务器.md",
      "key": "v-281f1782",
      "path": "/webpack/05_webpack%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8.html"
    },
    {
      "title": "使用ts-loader处理ts代码",
      "frontmatter": {},
      "regularPath": "/webpack/04_%E5%A4%84%E7%90%86ts%E4%BB%A3%E7%A0%81.html",
      "relativePath": "webpack/04_处理ts代码.md",
      "key": "v-324c1d54",
      "path": "/webpack/04_%E5%A4%84%E7%90%86ts%E4%BB%A3%E7%A0%81.html"
    },
    {
      "title": "什么是所有权？",
      "frontmatter": {},
      "regularPath": "/rust/05%E6%89%80%E6%9C%89%E6%9D%83.html",
      "relativePath": "rust/05所有权.md",
      "key": "v-a6b6828a",
      "path": "/rust/05%E6%89%80%E6%9C%89%E6%9D%83.html",
      "headers": [
        {
          "level": 2,
          "title": "栈与堆",
          "slug": "栈与堆"
        },
        {
          "level": 2,
          "title": "所有权规则",
          "slug": "所有权规则"
        },
        {
          "level": 2,
          "title": "内存与分配",
          "slug": "内存与分配"
        },
        {
          "level": 2,
          "title": "rust在拷贝字符类型时，不会简单的使用2个指针指向同一个地址",
          "slug": "rust在拷贝字符类型时-不会简单的使用2个指针指向同一个地址"
        }
      ]
    },
    {
      "title": "兼容性考虑 主要针对js和css新特性",
      "frontmatter": {},
      "regularPath": "/webpack/03_browseslist.html",
      "relativePath": "webpack/03_browseslist.md",
      "key": "v-ede2157e",
      "path": "/webpack/03_browseslist.html",
      "headers": [
        {
          "level": 2,
          "title": "如果没有配置 会有一个默认配置",
          "slug": "如果没有配置-会有一个默认配置"
        },
        {
          "level": 2,
          "title": "polyfill有很多实践方式 最好的还是babel-plugin-transform-runtime",
          "slug": "polyfill有很多实践方式-最好的还是babel-plugin-transform-runtime"
        },
        {
          "level": 2,
          "title": "preset支持react语法",
          "slug": "preset支持react语法"
        }
      ]
    }
  ],
  "themeConfig": {
    "sidebar": "auto"
  }
}
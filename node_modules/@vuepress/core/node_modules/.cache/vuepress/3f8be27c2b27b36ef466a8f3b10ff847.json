{"remainingRequest":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/cache-loader/dist/cjs.js??ref--3-0!/Users/lionaillen/Documents/workPlace/vuepress/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/lionaillen/Documents/workPlace/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--6!/Users/lionaillen/Documents/workPlace/vuepress/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/lionaillen/Documents/workPlace/vuepress/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/lionaillen/Documents/workPlace/vuepress/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/lionaillen/Documents/workPlace/vuepress/docs/6.8 字符串、数组和切片的应用.md?vue&type=template&id=b55f6f6e&","dependencies":[{"path":"/Users/lionaillen/Documents/workPlace/vuepress/docs/6.8 字符串、数组和切片的应用.md","mtime":1695225837796},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1695225559719},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1695225559719},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/babel-loader/lib/index.js","mtime":1695225559675},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1695225560400},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/cache-loader/dist/cjs.js","mtime":1695225559719},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/vue-loader/lib/index.js","mtime":1695225560400},{"path":"/Users/lionaillen/Documents/workPlace/vuepress/node_modules/@vuepress/markdown-loader/index.js","mtime":1695225559668}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHsKICB2YXIgX3ZtID0gdGhpcywKICAgIF9jID0gX3ZtLl9zZWxmLl9jOwogIHJldHVybiBfYygiQ29udGVudFNsb3RzRGlzdHJpYnV0b3IiLCB7CiAgICBhdHRyczogewogICAgICAic2xvdC1rZXkiOiBfdm0uJHBhcmVudC5zbG90S2V5CiAgICB9CiAgfSwgW19jKCJoMSIsIHsKICAgIGF0dHJzOiB7CiAgICAgIGlkOiAi5a2X56ym5LiyIgogICAgfQogIH0sIFtfYygiYSIsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICBocmVmOiAiI+Wtl+espuS4siIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIg5a2X56ym5LiyIildKSwgX3ZtLl92KCIgIiksIF9jKCJwIiwgW192bS5fdigi5YGH6K6+IHMg5piv5LiA5Liq5a2X56ym5Liy77yI5pys6LSo5LiK5piv5LiA5Liq5a2X6IqC5pWw57uE77yJ77yM6YKj5LmI5bCx5Y+v5Lul55u05o6l6YCa6L+HIGMgOj0gW11ieXRlKHMp5p2l6I635Y+W5LiA5Liq5a2X6IqC5pWw57uE55qE5YiH54mHIGNcbui/mOWPr+S7pemAmui/hyBjb3B5IOWHveaVsOadpei+vuWIsOebuOWQjOeahOebrueahO+8mmNvcHkoZHN0IFtdYnl0ZSwgc3JjIHN0cmluZykiKV0pLCBfdm0uX3YoIiAiKSwgX2MoInAiLCBbX3ZtLl92KCLlrZfnrKbkuLLovazmjaLkuIDmoLfvvIzlkIzmoLflj6/ku6Xkvb/nlKggYyA6PSBbXWludDMyKHMpIOivreazlVxu5Lmf5Y+v5Lul5bCG5a2X56ym5Liy6L2s5o2i5Li65YWD57Sg57G75Z6L5Li6IHJ1bmUg55qE5YiH54mH77yaciA6PSBbXXJ1bmUocykiKV0pLCBfdm0uX3YoIiAiKSwgX2MoInAiLCBbX3ZtLl92KCLlj6/ku6XpgJrov4fku6PnoIEgbGVuKFtdaW50MzIocykpIOadpeiOt+W+l+Wtl+espuS4suS4reWtl+espueahOaVsOmHj++8jOS9huS9v+eUqCB1dGY4LlJ1bmVDb3VudEluU3RyaW5nKHMpIOaViOeOh+S8muabtOmrmOS4gOeCueOAgiIpXSksIF92bS5fdigiICIpLCBfYygicCIsIFtfdm0uX3YoIui/mOWPr+S7peWwhuS4gOS4quWtl+espuS4sui/veWKoOWIsOafkOS4gOS4quWtl+espuaVsOe7hOeahOWwvumDqOOAgiIpXSksIF92bS5fdigiICIpLCBfYygiaDMiLCB7CiAgICBhdHRyczogewogICAgICBpZDogIuaIquWPluWtl+espuS4sueahOafkOS4gOmDqOWIhiIKICAgIH0KICB9LCBbX2MoImEiLCB7CiAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgYXR0cnM6IHsKICAgICAgaHJlZjogIiPmiKrlj5blrZfnrKbkuLLnmoTmn5DkuIDpg6jliIYiCiAgICB9CiAgfSwgW192bS5fdigiIyIpXSksIF92bS5fdigiIOaIquWPluWtl+espuS4sueahOafkOS4gOmDqOWIhiIpXSksIF92bS5fdigiICIpLCBfYygicCIsIFtfdm0uX3YoIuS9v+eUqCBzdWJzdHIgOj0gc3RyW3N0YXJ0OmVuZF0g5Y+v5Lul5LuO5a2X56ym5LiyIHN0ciDojrflj5bliLDku47ntKLlvJUgc3RhcnQg5byA5aeL5YiwIGVuZC0xIOS9jee9rueahOWtkOWtl+espuS4suOAguWQjOagt+eahO+8jHN0cltzdGFydDpdIOWImeihqOekuuiOt+WPluS7jiBzdGFydCDlvIDlp4vliLAgbGVuKHN0ciktMSDkvY3nva7nmoTlrZDlrZfnrKbkuLLjgILogIwgc3RyWzplbmRdIOihqOekuuiOt+WPluS7jiAwIOW8gOWni+WIsCBlbmQtMSDnmoTlrZDlrZfnrKbkuLLjgIIiKV0pLCBfdm0uX3YoIiAiKSwgX2MoInAiLCBbX3ZtLl92KCLlnKjlhoXlrZjkuK0g5LiA5Liq5a2X56ym5Liy5a6e6ZmF5LiK5piv5LiA5Liq57uT5p6E5L2T77yM5LiA5Liq5oyH5ZCR5a6e6ZmF5pWw5o2u55qE5oyH6ZKI77yM5ZKM5LiA5Liq6K6w5b2V5a2X56ym5Liy6ZW/5bqm55qE5pW05pWw77yI6L+Z5Liq5oyH6ZKI5a+555So5oi35p2l6K+05piv5a6M5YWo5LiN5Y+v6KeB55qE5omA5Lul5Y+v5Lul5oqK5a2X56ym5Liy55yL5L2c5piv5LiA5Liq5YC857G75Z6L77yM5Lmf5bCx5piv5LiA5Liq5a2X56ym5pWw57uE77yJIildKSwgX3ZtLl92KCIgIiksIF9jKCJoMyIsIHsKICAgIGF0dHJzOiB7CiAgICAgIGlkOiAi5L+u5pS55a2X56ym5Liy5Lit55qE5p+Q5Liq5a2X56ymIgogICAgfQogIH0sIFtfYygiYSIsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICBocmVmOiAiI+S/ruaUueWtl+espuS4suS4reeahOafkOS4quWtl+espiIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIg5L+u5pS55a2X56ym5Liy5Lit55qE5p+Q5Liq5a2X56ymIildKSwgX3ZtLl92KCIgIiksIF9jKCJwIiwgW192bS5fdigiZ2/kuK3nmoTlrZfnrKbkuLLmmK/kuI3lj6/lj5jnmoTvvIzlpoLmnpzlsJ3or5Xov5DooYxzdHJbaW5kZXhdID0gJ2Qn5Lya5oql6ZSZXG4iKSwgX2MoInN0cm9uZyIsIFtfdm0uX3YoIumCo+S5iOWmguS9leino+WGs+WRoiIpXSldKSwgX3ZtLl92KCIgIiksIF9jKCJibG9ja3F1b3RlIiwgW19jKCJwIiwgW192bS5fdigi5YWI5bCG5a2X56ym5Liy6L2s5o2i5oiQ5a2X6IqC5pWw57uE77yM54S25ZCO5L+u5pS577yM5pyA5ZCO6L2s5o2i5Zue5a2X56ym5Liy5qC85byP77yI5YCf5Yqp5YiH54mH77yJIildKV0pLCBfdm0uX3YoIiAiKSwgX2MoImgzIiwgewogICAgYXR0cnM6IHsKICAgICAgaWQ6ICLliIfniYfmjpLluo8iCiAgICB9CiAgfSwgW19jKCJhIiwgewogICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgIGF0dHJzOiB7CiAgICAgIGhyZWY6ICIj5YiH54mH5o6S5bqPIgogICAgfQogIH0sIFtfdm0uX3YoIiMiKV0pLCBfdm0uX3YoIiDliIfniYfmjpLluo8iKV0pLCBfdm0uX3YoIiAiKSwgX2MoImRpdiIsIHsKICAgIHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIgogIH0sIFtfYygicHJlIiwgewogICAgcHJlOiB0cnVlLAogICAgYXR0cnM6IHsKICAgICAgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IgogICAgfQogIH0sIFtfYygiY29kZSIsIFtfdm0uX3YoIiAgIC8v5o6S5bqPXG4gICBzb3J0LkludHMoc3RyKVxuICAgLy/mo4Dmn6XmmK/lkKblt7Lnu4/ooqvmjpLluo9cbiAgIHByaW50KHNvcnQuSW50c0FyZVNvcnRlZChzdHIpKVxuIildKV0pXSksIF9jKCJwIiwgW192bS5fdigi57G75Ly855qE5Y+v5Lul5L2/55So5Ye95pWwZnVuYyBGbG9hdDY0cyhhIFtdZmxvYXQ2NCkg5p2l5o6S5bqPIGZsb2F0NjQg55qE5YWD57Sg77yM5oiW5L2/55So5Ye95pWwIGZ1bmMgU3RyaW5ncyhhIFtdc3RyaW5nKSDmjpLluo/lrZfnrKbkuLLlhYPntKDjgIIiKV0pLCBfdm0uX3YoIiAiKSwgX2MoInAiLCBbX3ZtLl92KCLlhYjopoHlnKjmlbDnu4TmiJbogIXliIfniYfkuK3mkJzntKLkuIDkuKrlhYPntKDvvIzlv4XpobvlhYjmjpLluo/vvIzlm6DkuLrmoIflh4blupPnmoTmkJzntKLnrpfms5XmmK/kuozliIbms5VcbueEtuWQjuWwseWPr+S7peS9v+eUqOWHveaVsHNvcnQuU2VhcmNoSW50cygp6L+b6KGM5pCc57Si77yM6L+U5Zue5YC85Li66K+l5YWD57Sg55qE57Si5byVIildKSwgX3ZtLl92KCIgIiksIF9jKCJoMyIsIHsKICAgIGF0dHJzOiB7CiAgICAgIGlkOiAiYXBwZW5k5Ye95pWw5bi46KeB5pON5L2cIgogICAgfQogIH0sIFtfYygiYSIsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICBocmVmOiAiI2FwcGVuZOWHveaVsOW4uOingeaTjeS9nCIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIgYXBwZW5k5Ye95pWw5bi46KeB5pON5L2cIildKSwgX3ZtLl92KCIgIiksIF9jKCJvbCIsIFtfYygibGkiLCBbX3ZtLl92KCLov73liqDlhYPntKAgYT1hcHBlbmQoYSxiLi4uKeazqOaEj+imgeS9v+eUqOaJqeWxlei/kOeul+espiIpXSksIF92bS5fdigiICIpLCBfYygibGkiLCBbX3ZtLl92KCLlpI3liLbliIfniYdh55qE5YWD57Sg5Yiw5paw55qE5YiH54mHYuS4iiBiPW1ha2UoW11ULGxlbihhKSkgY29weShiLGEpIildKSwgX3ZtLl92KCIgIiksIF9jKCJsaSIsIFtfdm0uX3YoIuWIoOmZpOS9jeS6jue0ouW8lWnnmoTlhYPntKAgYT1hcHBlbmQoYVs6aV0sYVtpKzE6XS4uLikiKV0pLCBfdm0uX3YoIiAiKSwgX2MoImxpIiwgW192bS5fdigi5Yig6Zmk5YiH54mHYeS4reS7jue0ouW8lWnliLBq5L2N572u55qE5YWD57SgIGEgPSBhcHBlbmQoYVs6aV0sYVtqOl0uLi4pIildKSwgX3ZtLl92KCIgIiksIF9jKCJsaSIsIFtfdm0uX3YoImEgPSBhcHBlbmQoYSxtYWtlKFtdVCxqKS4uLikiKV0pLCBfdm0uX3YoIiAiKSwgX2MoImxpIiwgW192bS5fdigi5Zyo57Si5byVaeeahOS9jee9ruaPkuWFpeWFg+e0oHggYT1hcHBlbmQoYVs6aV0sYXBwZW5kKFtdVHt4fSxhW2k6XS4uLikuLi4pIildKSwgX3ZtLl92KCIgIiksIF9jKCJsaSIsIFtfdm0uX3YoIuWcqOS9nOeUqGnnmoTkvY3nva7mj5LlhaXplb/luqbkuLpq55qE5paw5YiH54mHIGE9IGFwcGVuZChhWzppXSxhcHBlbmQobWFrZShbXVQsaiksYVtpOl0uLi4pLi4uKSIpXSksIF92bS5fdigiICIpLCBfYygibGkiLCBbX3ZtLl92KCLlnKjntKLlvJVp55qE5L2N572u5o+S5YWl5YiH54mHYueahOaJgOacieWFg+e0oCBhID0gYXBwZW5kKGFbOmldLGFwcGVuZChiLGFbaTpdLi4uKS4uLikiKV0pLCBfdm0uX3YoIiAiKSwgX2MoImxpIiwgW192bS5fdigi5bCG5YWD57SgeOi/veWKoOWIsOWIh+eJh2EgPSBhcHBlbmQoYSx4KSIpXSldKSwgX3ZtLl92KCIgIiksIF9jKCJoMyIsIHsKICAgIGF0dHJzOiB7CiAgICAgIGlkOiAi5YiH54mH5ZKM5Z6D5Zy+5Zue5pS2IgogICAgfQogIH0sIFtfYygiYSIsIHsKICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICBhdHRyczogewogICAgICBocmVmOiAiI+WIh+eJh+WSjOWeg+WcvuWbnuaUtiIKICAgIH0KICB9LCBbX3ZtLl92KCIjIildKSwgX3ZtLl92KCIg5YiH54mH5ZKM5Z6D5Zy+5Zue5pS2IildKSwgX3ZtLl92KCIgIiksIF9jKCJkaXYiLCB7CiAgICBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIKICB9LCBbX2MoInByZSIsIHsKICAgIHByZTogdHJ1ZSwKICAgIGF0dHJzOiB7CiAgICAgIGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIKICAgIH0KICB9LCBbX2MoImNvZGUiLCBbX3ZtLl92KCd2YXIgZGlnaXRSZWdleHAgPSByZWdleHAuTXVzdENvbXBpbGUoIlswLTldKyIpXG5cbmZ1bmMgRmluZERpZ2l0cyhmaWxlbmFtZSBzdHJpbmcpIFtdYnl0ZSB7XG4gICAgYiwgXyA6PSBpb3V0aWwuUmVhZEZpbGUoZmlsZW5hbWUpXG4gICAgcmV0dXJuIGRpZ2l0UmVnZXhwLkZpbmQoYilcbn1cbicpXSldKV0pLCBfYygicCIsIFtfdm0uX3YoIui/meauteS7o+eggeWPr+S7pei/kOihjO+8jOS9huaYr+i/lOWbnueahOaVsOaNruaMh+WQkeeahOW6leWxguaYr+aVtOS4quaWh+S7tueahOaVsOaNru+8jOWPquimgeivpei/lOWbnueahOWIh+eJh+S4jeiiq+mHiuaUvu+8jOWeg+WcvuWbnuaUtuWwseS4jeiDvemHiuaUvui/meS4quaWh+S7tuWNoOeUqOeahOWGheWtmCIpXSldKTsKfTsKdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdOwpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWU7CmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH07"},{"version":3,"names":["render","_vm","_c","_self","attrs","$parent","slotKey","id","staticClass","href","_v","pre","class","staticRenderFns","_withStripped"],"sources":["/Users/lionaillen/Documents/workPlace/vuepress/docs/6.8 字符串、数组和切片的应用.md"],"sourcesContent":["var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"ContentSlotsDistributor\",\n    { attrs: { \"slot-key\": _vm.$parent.slotKey } },\n    [\n      _c(\"h1\", { attrs: { id: \"字符串\" } }, [\n        _c(\"a\", { staticClass: \"header-anchor\", attrs: { href: \"#字符串\" } }, [\n          _vm._v(\"#\"),\n        ]),\n        _vm._v(\" 字符串\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"假设 s 是一个字符串（本质上是一个字节数组），那么就可以直接通过 c := []byte(s)来获取一个字节数组的切片 c\\n还可以通过 copy 函数来达到相同的目的：copy(dst []byte, src string)\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"字符串转换一样，同样可以使用 c := []int32(s) 语法\\n也可以将字符串转换为元素类型为 rune 的切片：r := []rune(s)\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"可以通过代码 len([]int32(s)) 来获得字符串中字符的数量，但使用 utf8.RuneCountInString(s) 效率会更高一点。\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [_vm._v(\"还可以将一个字符串追加到某一个字符数组的尾部。\")]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"截取字符串的某一部分\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#截取字符串的某一部分\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 截取字符串的某一部分\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"使用 substr := str[start:end] 可以从字符串 str 获取到从索引 start 开始到 end-1 位置的子字符串。同样的，str[start:] 则表示获取从 start 开始到 len(str)-1 位置的子字符串。而 str[:end] 表示获取从 0 开始到 end-1 的子字符串。\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"在内存中 一个字符串实际上是一个结构体，一个指向实际数据的指针，和一个记录字符串长度的整数（这个指针对用户来说是完全不可见的所以可以把字符串看作是一个值类型，也就是一个字符数组）\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"修改字符串中的某个字符\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#修改字符串中的某个字符\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 修改字符串中的某个字符\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\"go中的字符串是不可变的，如果尝试运行str[index] = 'd'会报错\\n\"),\n        _c(\"strong\", [_vm._v(\"那么如何解决呢\")]),\n      ]),\n      _vm._v(\" \"),\n      _c(\"blockquote\", [\n        _c(\"p\", [\n          _vm._v(\n            \"先将字符串转换成字节数组，然后修改，最后转换回字符串格式（借助切片）\"\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"切片排序\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#切片排序\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 切片排序\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              \"   //排序\\n   sort.Ints(str)\\n   //检查是否已经被排序\\n   print(sort.IntsAreSorted(str))\\n\"\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"类似的可以使用函数func Float64s(a []float64) 来排序 float64 的元素，或使用函数 func Strings(a []string) 排序字符串元素。\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"p\", [\n        _vm._v(\n          \"先要在数组或者切片中搜索一个元素，必须先排序，因为标准库的搜索算法是二分法\\n然后就可以使用函数sort.SearchInts()进行搜索，返回值为该元素的索引\"\n        ),\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"append函数常见操作\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#append函数常见操作\" },\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" append函数常见操作\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"ol\", [\n        _c(\"li\", [_vm._v(\"追加元素 a=append(a,b...)注意要使用扩展运算符\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"复制切片a的元素到新的切片b上 b=make([]T,len(a)) copy(b,a)\"),\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"删除位于索引i的元素 a=append(a[:i],a[i+1:]...)\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\"删除切片a中从索引i到j位置的元素 a = append(a[:i],a[j:]...)\"),\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"a = append(a,make([]T,j)...)\")]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"在索引i的位置插入元素x a=append(a[:i],append([]T{x},a[i:]...)...)\"\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"在作用i的位置插入长度为j的新切片 a= append(a[:i],append(make([]T,j),a[i:]...)...)\"\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [\n          _vm._v(\n            \"在索引i的位置插入切片b的所有元素 a = append(a[:i],append(b,a[i:]...)...)\"\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"li\", [_vm._v(\"将元素x追加到切片a = append(a,x)\")]),\n      ]),\n      _vm._v(\" \"),\n      _c(\"h3\", { attrs: { id: \"切片和垃圾回收\" } }, [\n        _c(\n          \"a\",\n          { staticClass: \"header-anchor\", attrs: { href: \"#切片和垃圾回收\" } },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 切片和垃圾回收\"),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              'var digitRegexp = regexp.MustCompile(\"[0-9]+\")\\n\\nfunc FindDigits(filename string) []byte {\\n    b, _ := ioutil.ReadFile(filename)\\n    return digitRegexp.Find(b)\\n}\\n'\n            ),\n          ]),\n        ]),\n      ]),\n      _c(\"p\", [\n        _vm._v(\n          \"这段代码可以运行，但是返回的数据指向的底层是整个文件的数据，只要该返回的切片不被释放，垃圾回收就不能释放这个文件占用的内存\"\n        ),\n      ]),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"],"mappings":"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"}]}